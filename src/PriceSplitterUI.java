
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Brian
 */
public class PriceSplitterUI extends javax.swing.JFrame {

        Vector<String> savedNamesVector = new Vector<String>();                 //        Vector List
        Vector<String> savedItemNamesVector = new Vector<String>();
        Vector<String> savedItemPricesVector = new Vector<String>();
        
        DefaultTableModel savedItemsModel;
        DefaultTableModel savedNamesModel, savedNamesModel2;
        
        ArrayList<String> totalItems = new ArrayList<String>();
        ArrayList<String> totalPrices = new ArrayList<String>();
        ArrayList<ArrayList<String>> totalPersons = new ArrayList<ArrayList<String>>();
        
        ArrayList<String> tempPersons = new ArrayList<String>();
        
        Vector<ShoppingItem> infoVector = new Vector<ShoppingItem>();     //        Main Info Storage
        Vector<ShoppingItem> infoVector2 = new Vector<ShoppingItem>();
        
    /**
     * Creates new form PriceSplitterUI\
     */
    public PriceSplitterUI() {
        initComponents();
        
        settingsPanel.setVisible(false);
        advancedPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        personRemoveButton = new javax.swing.JButton();
        personAddButton = new javax.swing.JButton();
        personNameText = new javax.swing.JTextField();
        personNameScroll = new javax.swing.JScrollPane();
        personNameList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        itemRemoveButton = new javax.swing.JButton();
        itemAddButton = new javax.swing.JButton();
        itemNameText = new javax.swing.JTextField();
        itemPriceText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        settingsPanel = new javax.swing.JPanel();
        advancedPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        advancedTable = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();
        splitButton = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        outputPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();
        calculateButton = new javax.swing.JButton();
        taxCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("People"));
        jPanel1.setName(""); // NOI18N

        jLabel1.setText("Name");

        personRemoveButton.setText("Remove");
        personRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personRemoveButtonActionPerformed(evt);
            }
        });

        personAddButton.setText("Add");
        personAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personAddButtonActionPerformed(evt);
            }
        });

        personNameScroll.setViewportView(personNameList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(personNameScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(personNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(personRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(personAddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(personAddButton)
                    .addComponent(personNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(personRemoveButton)
                        .addGap(0, 47, Short.MAX_VALUE))
                    .addComponent(personNameScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Shopping List"));

        jLabel2.setText("Item");

        jLabel3.setText("Price");

        itemRemoveButton.setText("Remove");
        itemRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRemoveButtonActionPerformed(evt);
            }
        });

        itemAddButton.setText("Add");
        itemAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAddButtonActionPerformed(evt);
            }
        });

        itemPriceText.setToolTipText("");
        itemPriceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPriceTextActionPerformed(evt);
            }
        });

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setCellSelectionEnabled(true);
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);
        itemTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (itemTable.getColumnModel().getColumnCount() > 0) {
            itemTable.getColumnModel().getColumn(0).setPreferredWidth(195);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(itemNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(itemAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemRemoveButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        advancedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Advanced Settings"));

        advancedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Split"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        advancedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                advancedTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(advancedTable);
        if (advancedTable.getColumnModel().getColumnCount() > 0) {
            advancedTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        }

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout advancedPanelLayout = new javax.swing.GroupLayout(advancedPanel);
        advancedPanel.setLayout(advancedPanelLayout);
        advancedPanelLayout.setHorizontalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, advancedPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        advancedPanelLayout.setVerticalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        splitButton.setSelected(true);
        splitButton.setText("ON");
        splitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Evenly Split");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(advancedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(splitButton))
                .addGap(18, 18, 18)
                .addComponent(advancedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Owed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(outputTable);
        if (outputTable.getColumnModel().getColumnCount() > 0) {
            outputTable.getColumnModel().getColumn(0).setResizable(false);
            outputTable.getColumnModel().getColumn(0).setPreferredWidth(195);
            outputTable.getColumnModel().getColumn(1).setResizable(false);
        }

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        taxCheck.setSelected(true);
        taxCheck.setText("Tax");

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(taxCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculateButton)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanelLayout.createSequentialGroup()
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateButton)
                    .addComponent(taxCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void personAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personAddButtonActionPerformed
        
        String person = savePersonData();
        
        savedNamesVector.add(person);
        personNameList.setListData(savedNamesVector);
        personNameText.setText("");
        
        savedNamesModel = (DefaultTableModel)advancedTable.getModel();
        savedNamesModel.addRow(new Object[] {person} );
        
        savedNamesModel2 = (DefaultTableModel)outputTable.getModel();
        savedNamesModel2.addRow(new Object[] {person, 0} );
    }//GEN-LAST:event_personAddButtonActionPerformed

    private void personRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personRemoveButtonActionPerformed

        savedNamesModel = (DefaultTableModel)advancedTable.getModel();
        savedNamesModel.removeRow(personNameList.getSelectedIndex());
        
        savedNamesModel2 = (DefaultTableModel)outputTable.getModel();
        savedNamesModel2.removeRow(personNameList.getSelectedIndex());
        
        savedNamesVector.removeElementAt(personNameList.getSelectedIndex());
        personNameList.setListData(savedNamesVector);
    }//GEN-LAST:event_personRemoveButtonActionPerformed

    private void itemRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRemoveButtonActionPerformed
        
        totalItems.remove(itemTable.getSelectedRow());
        totalPrices.remove(itemTable.getSelectedRow());
        totalPersons.remove(itemTable.getSelectedRow());
        
        savedItemsModel = (DefaultTableModel)itemTable.getModel();
        savedItemsModel.removeRow(itemTable.getSelectedRow());
    }//GEN-LAST:event_itemRemoveButtonActionPerformed

    private void itemAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAddButtonActionPerformed
        
        String itemName = saveItemNameData();
        String itemPrice = saveItemPriceData();
        
        savedItemsModel = (DefaultTableModel)itemTable.getModel();
        savedItemsModel.addRow(new Object[] {itemName, itemPrice} );
        
        float f = Float.parseFloat(itemPrice);
        
        totalItems.add(itemName);
        totalPrices.add(itemPrice);
        totalPersons.add(new ArrayList());
        
        itemNameText.setText("");
        itemPriceText.setText("");
    }//GEN-LAST:event_itemAddButtonActionPerformed

    private void itemPriceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPriceTextActionPerformed

    }//GEN-LAST:event_itemPriceTextActionPerformed

    private void splitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitButtonActionPerformed
        
        if(splitButton.isSelected()) {
            
            advancedPanel.setVisible(false);
            splitButton.setText("ON");
        }
        else {
            
            advancedPanel.setVisible(true);
            splitButton.setText("OFF");
        }
    }//GEN-LAST:event_splitButtonActionPerformed

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        
        if(itemIsSelected()) {
            
            settingsPanel.setVisible(true);
            
            //System.out.println(infoVector.get(itemTable.getSelectedRow()).getItemName());
            //System.out.println(infoVector.get(itemTable.getSelectedRow()).getPersonList().get(0));
            
            if(totalPersons.get(itemTable.getSelectedRow()).size() > 0) {
                
                splitButton.setSelected(false);
                splitButton.setText("OFF");
                
                for(int i=0; i<totalPersons.get(itemTable.getSelectedRow()).size(); i++) {
                    
                    for(int x=0; x<advancedTable.getRowCount(); x++) {
                        
                        if(totalPersons.get(itemTable.getSelectedRow()).get(i).equals(   savedNamesVector.get(x)   )) {
                            
                            advancedTable.setValueAt(true, x, 1);
                        }
                        
                        if(!totalPersons.get(itemTable.getSelectedRow()).contains(savedNamesVector.get(x)))
                            advancedTable.setValueAt(false, x, 1);
                    }
                }
                
                advancedPanel.setVisible(true);
            }
            else {
                
                splitButton.setSelected(true);
                splitButton.setText("ON");
                
                for(int x=0; x<advancedTable.getRowCount(); x++) {
                        
                    advancedTable.setValueAt(false, x, 1);
                }
                
                advancedPanel.setVisible(false);
            }
        }
        else
            settingsPanel.setVisible(false);
    }//GEN-LAST:event_itemTableMouseClicked

    private void advancedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advancedTableMouseClicked
        
//        if(!advancedTable.getSelectionModel().isSelectionEmpty()) {
//            
//            Boolean checked = Boolean.valueOf(advancedTable.getValueAt(advancedTable.getSelectedRow(), 1).toString());
//            if(checked) {
//               
//               totalPersons.get(itemTable.getSelectedRow()).add(savedNamesVector.get(advancedTable.getSelectedRow()));
//               System.out.println(savedNamesVector.get(advancedTable.getSelectedRow()) + " Added");
//               System.out.println(totalPersons.toString());
//            }
//            else {
//                
//                for(int i=0; i<totalPersons.get(itemTable.getSelectedRow()).size(); i++) {
//                    
//                    if(totalPersons.get(itemTable.getSelectedRow()).get(i).equalsIgnoreCase(advancedTable.getValueAt(advancedTable.getSelectedRow(), 0).toString())) {
//                        
//                        totalPersons.get(itemTable.getSelectedRow()).remove(i);
//                        System.out.println(advancedTable.getValueAt(advancedTable.getSelectedRow(), 0).toString() + " Removed at " + i);
//                    }
//                }
//            }
//        }
    }//GEN-LAST:event_advancedTableMouseClicked

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        
        ArrayList<Float> splitPrices = new ArrayList<Float>();
        ArrayList<String> tempItems = (ArrayList<String>)totalItems.clone();
        ArrayList<String> tempPrices = (ArrayList<String>)totalPrices.clone();
        ArrayList<ArrayList<String>> tempPersons = (ArrayList<ArrayList<String>> )totalPersons.clone();
        ArrayList <Float> tempSplitPrices = new ArrayList<Float>();
        
        int listSize = tempItems.size();
        int numPeople = savedNamesVector.size();
        float tempSplit = 0;
        
        for(int x=0; x<numPeople; x++) {
            
            splitPrices.add(Float.valueOf(0));
            tempSplitPrices.add(Float.valueOf(0));
        }
        
        for(int x=0; x<listSize; x++) {
            
            if(tempPersons.get(x).size() == 0) {       //      If the item is being completely split
                
                tempSplit += Float.parseFloat(tempPrices.get(x))/numPeople;
            }
        }
        
        for(int x=0; x<tempPersons.size(); x++) {
            
            for(int i=0; i<tempPersons.get(x).size(); i++) {
                
                for(int t=0; t<outputTable.getRowCount(); t++) {
                    
                    if(tempPersons.get(x).get(i).equals(outputTable.getValueAt(t, 0))) {
                        
                        tempSplitPrices.set(t, Float.parseFloat(tempPrices.get(x))/tempPersons.get(x).size());
                    }
                }
            }
            
            
            for(int j=0; j<numPeople; j++) {
                
                splitPrices.set(j, splitPrices.get(j) + tempSplitPrices.get(j));
                tempSplitPrices.set(j, (float)0);
            }
            
        }
        
        for(int x=0; x<splitPrices.size(); x++) {
            
            splitPrices.set(x, splitPrices.get(x) + tempSplit);
        }
        
        for(int x=0; x<outputTable.getRowCount(); x++) {
            
            outputTable.setValueAt(splitPrices.get(x), x, 1);
        }
        
        splitPrices.clear();
        tempSplitPrices.clear();
        
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        compilePeople();
    }//GEN-LAST:event_saveButtonActionPerformed
    
    public void compilePeople() {
        
        Boolean checked = false;
        
        for(int x=0; x<advancedTable.getRowCount(); x++) {
            
            checked = Boolean.valueOf(advancedTable.getValueAt(x, 1).toString());
            if(checked) {
               
               if(!totalPersons.get(itemTable.getSelectedRow()).contains(savedNamesVector.get(x))) {
                   
                   totalPersons.get(itemTable.getSelectedRow()).add(savedNamesVector.get(x));
                   System.out.println(savedNamesVector.get(x) + " Added");
                   System.out.println(totalPersons.toString());
               }
            }
            else {
                
                for(int i=0; i<totalPersons.get(itemTable.getSelectedRow()).size(); i++) {
                    
                    if(totalPersons.get(itemTable.getSelectedRow()).get(i).equalsIgnoreCase(advancedTable.getValueAt(x, 0).toString())) {
                        
                        totalPersons.get(itemTable.getSelectedRow()).remove(i);
                        System.out.println(advancedTable.getValueAt(x, 0).toString() + " Removed at " + i);
                    }
                }
            }
        }
    }
    
    public boolean itemIsSelected() {
        
        return !itemTable.getSelectionModel().isSelectionEmpty();
    }
    
    private String savePersonData() {
        
        String result = "";
        result = personNameText.getText();
        return result;
    }
    
    private String saveItemNameData() {
        
        String result = "";
        result = itemNameText.getText();
        return result;
    }
    
    private String saveItemPriceData() {
        
        String result = "";
        result = itemPriceText.getText();
        return result;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PriceSplitterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PriceSplitterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PriceSplitterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PriceSplitterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PriceSplitterUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JTable advancedTable;
    private javax.swing.JButton calculateButton;
    private javax.swing.JButton itemAddButton;
    private javax.swing.JTextField itemNameText;
    private javax.swing.JTextField itemPriceText;
    private javax.swing.JButton itemRemoveButton;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JTable outputTable;
    private javax.swing.JButton personAddButton;
    private javax.swing.JList<String> personNameList;
    private javax.swing.JScrollPane personNameScroll;
    private javax.swing.JTextField personNameText;
    private javax.swing.JButton personRemoveButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JToggleButton splitButton;
    private javax.swing.JCheckBox taxCheck;
    // End of variables declaration//GEN-END:variables
}
